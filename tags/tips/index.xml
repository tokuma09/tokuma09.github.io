<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tips on</title><link>https://tokuma09.github.io/tags/tips/</link><description>Recent content in tips on</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Tue, 02 May 2023 00:04:42 +0000</lastBuildDate><atom:link href="https://tokuma09.github.io/tags/tips/index.xml" rel="self" type="application/rss+xml"/><item><title>Diffusion Modelサマリー</title><link>https://tokuma09.github.io/blog/20230502/</link><pubDate>Tue, 02 May 2023 00:04:42 +0000</pubDate><guid>https://tokuma09.github.io/blog/20230502/</guid><description>1. はじめに 2020年にDiffusion Modelに関する論文が発表されて以降、生成モデルの研究が進展している。 2021年以降はこのDiffusion Modelをベースとした画像生成AIサービスがリリースされて世間からの注目を集めている。
DALL·E2 Midjourney Stable Diffusion 2023年5月現在生成モデルとして最も注目を集めているのは大規模言語モデル(例: OpenAIのGPT-4)であるが、Diffusion Modelは主に画像生成の文脈で利用されており、モデルのスコープが異なることに注意されたい。
最近のバズワードの大規模言語モデルではないが、生成モデルという枠組みの中では非常に重要かつモデル構造も面白いので、今回はDiffusion Modelを取り扱っていきたい。
TransformerベースにGPTモデルファミリーまで一気に論文読む&amp;amp;実装する会も将来的に扱うつもり。 2. Diffusion Model 早わかり Diffusion Modelは生成モデルの1種であり、forward processとreverse processの２つの確率過程から構成される。
平たく言えば下記の図のようになる。
forward processは画像に僅かなノイズを少しずつ加えるプロセスを示している。 reverse processはノイズになったデータから徐々に元の画像に復元するプロセスを示している。 このreverse processをモデル化してデータから学習する 実際に学習したモデルを用いて、画像生成する場合には何らかのノイズをモデルに与えて、reverse processを経由することで、画像が生成される。Ho et al.(2020)は下記のような生成結果を提示している。
なお、最近の研究ではテキストを入力すると対応する画像が生成されるモデルも存在している。
例: OpenAIのGLIDE このような生成は条件付き生成と呼ばれ、実務上求められるのはこちらの生成方法だろう。
なぜこのようなシンプルな構造でうまくいくのか？については現在も明確な答えはないが、最もシンプルな仮説は下記である。
reverse processが多くの確率層からなる深いネットワークであることが複雑な画像生成を実現している 初期の画像処理モデルも層を深くすることが出来る様になってブレイクスルーが起きた(例: ResNet) 生成プロセス(reverse process)のみをモデル化している VAEは生成モデルと認識モデルを同時に学習 GANは生成モデルと認識モデルを交互に学習 それでは以降では具体的なモデルの中身を見ていきたい。
3. Diffusion Model モデル詳細 本章では岡野原(2023)に基づいてDiffusion Modelの全体像・学習・推論を見ていく。
余談: Ho et al.(2020)を見ていってもよいが、いきなりこれを見ると挫折する。やや遠回りに見えるがLuo et al.(2022)から読み進めていくことを勧める。 3.1 全体像 2で述べたようにDiffusion Modelはforward processとreverse processから構成される。
forward process
forward processはもともとのデータ $\bold{x}_0$ から徐々にデータの情報を減らしてノイズを加えた、ノイズ付与データの系列 $\bold{x}_1, \cdots, \bold{x}_T$を得るマルコフプロセスである。</description></item><item><title>ブログ再開</title><link>https://tokuma09.github.io/blog/20230418/</link><pubDate>Tue, 18 Apr 2023 13:07:56 +0000</pubDate><guid>https://tokuma09.github.io/blog/20230418/</guid><description>諸々の関係でやったことは公開にしたほうがいいよ！というアドバイスを受けたのでブログを再開しようと思う。
手始めに2年前に作って放置していたブログ設定の手直しを&amp;hellip;
1. やりたいこと ギークに見えるブログを作りたい！
2. 要件 ミーハーだからどうせブログやるならGitHub Pagesを使いたい！ 体裁は整えたくない！ buildとか自分でやってたらオペミスする！ 当然環境もつらい！ 3. 実現するツール 要件1: GitHub Pages リポジトリからビルドしてサイトを公開出来る静的サイトホスティングサービス 要件1に対応 要件2: hugo 体裁を自分でやらずにいい感じにしてくれる静的サイトジェネレータ (実は研修課題とかで触ってたし多少知ってる) 要件3: GitHub Actions ビルドとかテストとかをgithub上のイベントをトリガーに自動的に実行してくれるツール (CI/CDの違いはよくわかってない) 要件3.1: docker 説明不要のコンテナ型仮想環境提供するツール 4. ブログ投稿の手順 ブランチを切る リポジトリ直下でmake postをターミナル上で実行 新しく投稿するネタを入れるマークダウンが/src/content/blog/yyyymmdd.mdとして生成される。 好きなことを書く このときmake serve_localをターミナル上で叩く localhost:1313にアクセスすることで、中身のチェックが可能 コミット&amp;amp;プッシュ プルリクエストを投げる 実際にブログが更新される 5. どう技術が使われているか？ 上のフローは裏側の技術がどう使われているかは書いていないので具体的にはmakeとプルリク・ブログ更新の裏側について補足する
makeコマンドの裏側 ここでdockerとHugoを利用している。 klakegg/hugoというHugoを含んだイメージを利用してすべてそのコンテナで動作させる。 下記の様なMakefileでdocker上でHugoの処理をお願いするキーワード設定。 CURRNET_DIR := $(shell pwd) # Hugo HUGO_VER := 0.101.0 HUGO_IMG := klakegg/hugo:$(HUGO_VER) HUGO_CMD := docker run --rm -it \ -v $(CURRNET_DIR):/src \ $(HUGO_IMG) build: $(HUGO_CMD) serve_local: docker run --rm -it \ -p 1313:1313 \ -v $(CURRNET_DIR):/src \ $(HUGO_IMG) server -D post: @yyyymmdd=&amp;#34;$$(date +%Y%m%d)&amp;#34;; \ $(HUGO_CMD) new blog/$${year}/$${month}/$${yyyymmdd}.</description></item><item><title>時間の使い方再考</title><link>https://tokuma09.github.io/blog/20220104/</link><pubDate>Tue, 04 Jan 2022 16:37:50 +0900</pubDate><guid>https://tokuma09.github.io/blog/20220104/</guid><description>&lt;p>&lt;a href="../20220103">前回の記事&lt;/a>にもあるように、最近の反省として時間の使い方下手だった事が挙げられる。&lt;/p>
&lt;p>年末にツイッターを見ていたら、&lt;a href="https://twitter.com/toyotaka_sakai/status/1475076579424600064?s=20">坂井先生のツイート&lt;/a>にまさに時間の使い方に関する本の紹介があったので、読んでみた。&lt;/p>
&lt;p>中身については多くは触れないが、反省点だけ書き出す。
本当は付属のワークシートを書き出す予定だったが、得るものが少なかった。&lt;/p></description></item></channel></rss>